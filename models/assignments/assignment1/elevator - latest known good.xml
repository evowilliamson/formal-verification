<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// constants and variable related to number of floors
const int NO_FLOORS = 2;               // # number of floors including the base floor
const int NO_ELEVATORS = 2;            // # number of elevators
typedef int[0, NO_FLOORS - 1] id_f;    // floor id from 0 to NO_FLOORS - 1
typedef int[0, NO_ELEVATORS - 1] id_e; // elevator id from 0 to NO_ELEVATORS - 1
//typedef int[0, (NO_FLOORS * NO_ELEVATORS) - 1] id_fe;
 
// cabin door channels and constants
chan open_door[id_e], close_door[id_e], door_open[id_e], door_closed[id_e]; 
// time to open or close the door
const int door_time = 1;     

// protecting door channels and constants
chan open_pdoor[id_e], close_pdoor[id_e], pdoor_open[id_e], pdoor_closed[id_e];

// engine channels
chan stop[id_e], move_down[id_e], move_up[id_e];

// floor sensors channels and constants
const int floor_time = 1; // time to travel one floor
chan start_sensors[id_e], stop_sensors[id_e], reach_floor[id_e];

// button channels
chan req[id_f];

// communications between RequestHandler and MainControl
chan go[id_e], served[id_e];

// Place global declarations here.

// The current floor of the elevator:
id_f current_floor[id_e]; 
// The floor to which the main control is requested to go to.
// This variable is just used for communication between the request handler and the main control.
// Therefore, we can declare it meta (i.e., not part of the state).
meta id_f target_floor[id_e];

int get_pdoor_no(id_e elevator_no)
{
    return (elevator_no * NO_FLOORS) + (current_floor[elevator_no]);    
}

int get_pdoor_no_alt(id_f floor_no, id_e elevator_no)
{
    return (elevator_no * NO_FLOORS) + floor_no;    
}
</declaration>
	<template>
		<name>engine</name>
		<parameter>id_e i</parameter>
		<location id="id0" x="16" y="-168">
			<committed/>
		</location>
		<location id="id1" x="-256" y="-168">
			<committed/>
		</location>
		<location id="id2" x="-112" y="-80">
			<committed/>
		</location>
		<location id="id3" x="-256" y="-48">
			<name x="-306" y="-34">e_moving_down</name>
		</location>
		<location id="id4" x="16" y="-48">
			<name x="-17" y="-34">e_moving_up</name>
		</location>
		<location id="id5" x="-112" y="-168">
			<name x="-127" y="-204">e_idle</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="24" y="-128">start_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-248" y="-128">start_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-104" y="-128">stop_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-204" y="-68">stop[i]?</label>
			<nail x="-216" y="-48"/>
			<nail x="-112" y="-48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-224" y="-192">move_down[i]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-59" y="-68">stop[i]?</label>
			<nail x="-40" y="-48"/>
			<nail x="-112" y="-48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-76" y="-195">move_up[i]?</label>
		</transition>
	</template>
	<template>
		<name>button</name>
		<declaration>clock x;</declaration>
		<location id="id6" x="-32" y="-8">
			<name x="-51" y="8">b_idle</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="-48" y="-112">i : id_f</label>
			<label kind="guard" x="-48" y="-96">x &gt;=1</label>
			<label kind="synchronisation" x="-48" y="-80">req[i]!</label>
			<label kind="assignment" x="-48" y="-64">x=0</label>
			<nail x="-64" y="-48"/>
			<nail x="0" y="-48"/>
		</transition>
	</template>
	<template>
		<name>fifo_request_handler</name>
		<parameter>id_e e</parameter>
		<declaration>// The dummy request handler gets requests from the button.
// When these are received, they are stored in the following local variable.
id_f current_req;

// Before beginning with the assignment, you should take some time understand how a request is send from the button to the dummy request handler.
// This communication uses a parametrized channel "req". Basically, for each floor i there is a channel req[i].
// Another way of providing communication makes use of global variables.
// An example is the way the request handler sends a go signal to the main control.
// A global variable is used (target_floor, see "Declarations" of the project). When sending a go, the request handler puts a value into this global variable.
// When receiving a go, the main control takes this value and immediately sets it to zero. In UPPAAL, this is a very efficient way of encoding a synchronous communication.


// The dummy request handler can only deal with one request at a time.
// Only after the request has been served, a new request can be received.
// The first part of the task tells you how to build a FIFO request handler.
// This handler receives requests and stores them in a queue.
// The following code defines this queue.
// Size of the queue:
const int size = 5; 

// Local queue storing the requests.
id_f list[size];
int[0,size] len = 0;


// Put an element at the end of the queue
// Current allocation scheme is a FIFO
// might not be the smartest scheme but it ensures
// that all requests are served ...
// until the FIFO is full. Then it simply 
// ignores all requests. 
void enqueue(id_f element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}



// Returns the front element of the queue
id_f front()
{
   return list[0];
}

// Returns the last element of the queue
id_f last()
{
   return list[len - 1];
}

bool is_empty ()
{
	return len == 0;
}

bool is_full ()
{
	return len == size;
}

bool is_not_floor_zero(id_f element)
{
    return (element != 0);
}
</declaration>
		<location id="id7" x="-1411" y="-1487">
			<name x="-1394" y="-1504">fifo_waiting</name>
		</location>
		<location id="id8" x="-1563" y="-1487">
			<name x="-1640" y="-1496">fifo_idle</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="select" x="-1844" y="-1572">i: id_f</label>
			<label kind="guard" x="-1963" y="-1555">!is_full() &amp;&amp; is_not_floor_zero(i)</label>
			<label kind="synchronisation" x="-1844" y="-1538">req[i]?</label>
			<label kind="assignment" x="-1844" y="-1521">enqueue(i)</label>
			<nail x="-1742" y="-1649"/>
			<nail x="-1742" y="-1419"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="select" x="-1249" y="-1572">i: id_f</label>
			<label kind="guard" x="-1249" y="-1555">!is_full() &amp;&amp; is_not_floor_zero(i)</label>
			<label kind="synchronisation" x="-1249" y="-1538">req[i]?</label>
			<label kind="assignment" x="-1249" y="-1521">enqueue(i)</label>
			<nail x="-1258" y="-1657"/>
			<nail x="-1258" y="-1419"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-1547" y="-1581">!is_empty()</label>
			<label kind="synchronisation" x="-1547" y="-1564">go[e]!</label>
			<label kind="assignment" x="-1547" y="-1547">target_floor[e] =
front(), dequeue()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-1521" y="-1368">served[e]?</label>
			<nail x="-1411" y="-1375"/>
			<nail x="-1563" y="-1375"/>
		</transition>
	</template>
	<template>
		<name>floor_sensors</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id9" x="32" y="-24">
			<name x="-8" y="-8">fs_moving</name>
			<label kind="invariant" x="40" y="-56">x &lt;= floor_time</label>
		</location>
		<location id="id10" x="-200" y="-24">
			<name x="-264" y="-16">fd_idle</name>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-120" y="-112">stop_sensors[i]?</label>
			<nail x="32" y="-88"/>
			<nail x="-200" y="-88"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="136" y="-24">x &gt;= floor_time</label>
			<label kind="synchronisation" x="136" y="-8">reach_floor[i]!</label>
			<label kind="assignment" x="136" y="8">x := 0</label>
			<nail x="128" y="-24"/>
			<nail x="128" y="32"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-128" y="-48">start_sensors[i]?</label>
			<label kind="assignment" x="-104" y="-16">x := 0</label>
		</transition>
	</template>
	<template>
		<name>cabin_door</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id11" x="-348" y="42">
			<committed/>
		</location>
		<location id="id12" x="212" y="42">
			<committed/>
		</location>
		<location id="id13" x="212" y="-238">
			<committed/>
		</location>
		<location id="id14" x="-348" y="-238">
			<committed/>
		</location>
		<location id="id15" x="212" y="-85">
			<name x="228" y="-93">cd_closed</name>
		</location>
		<location id="id16" x="-96" y="-88">
			<name x="-80" y="-88">cd_executing</name>
			<label kind="invariant" x="-80" y="-104">x &lt;= door_time</label>
		</location>
		<location id="id17" x="-348" y="-86">
			<name x="-442" y="-100">cd_opened</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id16"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-272" y="42">pdoor_open[i]?</label>
			<nail x="-102" y="42"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="17" y="42">open_pdoor[i]!</label>
			<nail x="-93" y="42"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="8" y="-263">pdoor_closed[i]?</label>
			<nail x="-93" y="-238"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-272" y="-263">close_pdoor[i]!</label>
			<nail x="-102" y="-238"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id17"/>
			<label kind="guard" x="-460" y="-46">x &gt;= door_time</label>
			<label kind="synchronisation" x="-460" y="-30">door_open[i]!</label>
			<label kind="assignment" x="-460" y="-14">x := 0</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="216" y="-40">open_door[i]?</label>
			<label kind="assignment" x="216" y="-16">x := 0</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="guard" x="216" y="-184">x &gt;= door_time</label>
			<label kind="synchronisation" x="216" y="-168">door_closed[i]!</label>
			<label kind="assignment" x="216" y="-152">x := 0</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-450" y="-185">close_door[i]?</label>
			<label kind="assignment" x="-450" y="-168">x := 0</label>
		</transition>
	</template>
	<template>
		<name>main_control</name>
		<parameter>id_e i</parameter>
		<declaration>// the current destination
id_f dest_floor = 1; 

// switch that indicates whether the elevator trip (up and down) was served
bool was_served = false;

// function that returns true if the destination floor has been reached
bool dest_reached ()
{
	return current_floor[i] == dest_floor;
}

// returns true if the elevator must go up
bool must_go_up ()
{
    if (current_floor[i] &lt; dest_floor) 
    {
        return true;
    }
    else 
    {
        return false;
    }
}

// convenience method that returns true if the elevator must go down
bool must_go_down ()
{
    bool ret_value = !must_go_up();
    return ret_value;
}

// This function adjusts the current_floor, depending of the movement of direction
void adjust_current_floor()
{
    if (must_go_up()) 
    {
        current_floor[i]++;
        // check if the floor was reached on the way up
        if (dest_reached()) 
        {
            was_served = true;
        }
    }
    else 
    {
        current_floor[i]--;
    }
}

// convenience function that checks if the elevator has reached the destination floor
bool elevator_at_dest()
{
    if (was_served &amp;&amp; dest_floor != 0) 
    {
        return true;
    }
    else 
    {
        return false;
    }
}

// convenience function that checks if the elevator is ready to serve (again)
bool elevator_ready()
{
    if (!was_served)
    {
        return true;
    }
    else 
    {
        return false;
    }    
}

// convenience function that checks if the elevator has returned from the destination back again
bool elevator_back_at_base()
{
    if (was_served &amp;&amp; dest_floor == 0)
    {
        return true;
    }
    else 
    {
        return false;
    }    
}
</declaration>
		<location id="id18" x="-2303" y="-1870">
		</location>
		<location id="id19" x="-2303" y="-1955">
			<name x="-2397" y="-1989">mc_door_closed</name>
			<committed/>
		</location>
		<location id="id20" x="-2456" y="-1870">
			<name x="-2515" y="-1853">mc_door_init_closing</name>
			<committed/>
		</location>
		<location id="id21" x="-2159" y="-1955">
			<name x="-2142" y="-1981">mc_moving</name>
		</location>
		<location id="id22" x="-2712" y="-1963">
			<name x="-2779" y="-1997">mc_door_opening</name>
		</location>
		<location id="id23" x="-2848" y="-1963">
			<name x="-2873" y="-1938">mc_idle</name>
			<committed/>
		</location>
		<location id="id24" x="-2592" y="-1963">
			<name x="-2584" y="-1955">mc_door_opened</name>
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id24"/>
			<target ref="id24"/>
			<label kind="guard" x="-2643" y="-2167">elevator_back_at_base()</label>
			<label kind="synchronisation" x="-2643" y="-2150">served[i]!</label>
			<label kind="assignment" x="-2643" y="-2133">was_served = false</label>
			<nail x="-2516" y="-2108"/>
			<nail x="-2652" y="-2108"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id20"/>
			<label kind="guard" x="-2507" y="-2014">elevator_at_dest()</label>
			<label kind="assignment" x="-2507" y="-1997">dest_floor = 0</label>
			<nail x="-2456" y="-1963"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-2396" y="-1929">door_closed[i]?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-2422" y="-1895">close_door[i]!</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id23"/>
			<label kind="guard" x="-2525" y="-2218">dest_reached()</label>
			<label kind="synchronisation" x="-2525" y="-2201">stop[i]!</label>
			<nail x="-2159" y="-2176"/>
			<nail x="-2847" y="-2176"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="-2269" y="-2065">must_go_down()</label>
			<label kind="synchronisation" x="-2269" y="-2048">move_down[i]!</label>
			<nail x="-2219" y="-2031"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="-2253" y="-1878">must_go_up()</label>
			<label kind="synchronisation" x="-2253" y="-1861">move_up[i]!</label>
			<nail x="-2219" y="-1878"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id20"/>
			<label kind="guard" x="-2703" y="-1887">elevator_ready()</label>
			<label kind="synchronisation" x="-2703" y="-1870">go[i]?</label>
			<label kind="assignment" x="-2703" y="-1853">dest_floor = 
target_floor[i]</label>
			<nail x="-2592" y="-1870"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id21"/>
			<label kind="guard" x="-2159" y="-1903">!dest_reached()</label>
			<label kind="synchronisation" x="-2159" y="-1887">reach_floor[i]?</label>
			<label kind="assignment" x="-2159" y="-1870">adjust_current_floor()</label>
			<nail x="-2100" y="-1955"/>
			<nail x="-2100" y="-1904"/>
			<nail x="-2159" y="-1904"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-2694" y="-1955">door_open[i]?</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-2822" y="-1955">open_door[i]!</label>
		</transition>
	</template>
	<template>
		<name>protecting_door</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id25" x="-112" y="8">
			<name x="-144" y="24">pd_executing_open</name>
			<label kind="invariant" x="-144" y="40">x &lt;= door_time</label>
		</location>
		<location id="id26" x="40" y="-96">
			<name x="59" y="-110">pd_closed</name>
		</location>
		<location id="id27" x="-112" y="-120">
			<name x="-93" y="-127">pd_executing</name>
			<label kind="invariant" x="-144" y="-104">x &lt;= door_time</label>
		</location>
		<location id="id28" x="-232" y="-104">
			<name x="-314" y="-119">pd_open</name>
		</location>
		<init ref="id26"/>
		<transition>
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-352" y="-80">x &gt;= door_time</label>
			<label kind="synchronisation" x="-352" y="-64">pdoor_open[i]!</label>
			<label kind="assignment" x="-352" y="-48">x := 0</label>
			<nail x="-232" y="8"/>
			<nail x="-232" y="-80"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="48" y="-64">open_pdoor[i]?</label>
			<label kind="assignment" x="51" y="-51">x := 0</label>
			<nail x="40" y="-32"/>
			<nail x="40" y="8"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="guard" x="-88" y="-200">x &gt;= door_time</label>
			<label kind="synchronisation" x="-88" y="-184">pdoor_closed[i]!</label>
			<label kind="assignment" x="-88" y="-168">x := 0</label>
			<nail x="-96" y="-152"/>
			<nail x="40" y="-152"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-229" y="-195">close_pdoor[i]?</label>
			<label kind="assignment" x="-229" y="-178">x := 0</label>
			<nail x="-232" y="-152"/>
			<nail x="-128" y="-152"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//reqHandler_process = reqHandlerSimple();

//engineCtl_process = engineCtl();



// List one or more processes to be composed into a system.
system cabin_door, protecting_door,engine, floor_sensors, button, fifo_request_handler, main_control;</system>
	<queries>
		<query>
			<formula>A[] main_control(0).mc_served imply cabin_door(0).cd_opened
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] engine(0).e_moving_up imply cabin_door(0).cd_closed
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
