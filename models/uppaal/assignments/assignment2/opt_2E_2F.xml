<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int NO_FLOORS = 3;               // number of floors including the base floor
const int NO_ELEVATORS = 2;            // number of elevators
const int MAX_SIZE = 5;                // maximum amount of requests per elevator before it takes off
const int DOOR_TIME = 1;               // time it takes to close the door
const int FLOOR_TIME = 1;              // time to travel one floor
const int MAX_WAIT = 5;   

typedef int[0, NO_FLOORS - 1] id_f;    // floor id from 0 to NO_FLOORS - 1
typedef int[0, NO_ELEVATORS - 1] id_e; // elevator id from 0 to NO_ELEVATORS - 1

// time to open or close the door
 
// cabin door channels
chan open_door[id_e], close_door[id_e], door_open[id_e], door_closed[id_e]; 

// protecting door channels
chan open_pdoor[id_e], close_pdoor[id_e], pdoor_open[id_e], pdoor_closed[id_e];

// engine channels
chan stop[id_e], move_down[id_e], move_up[id_e];

// floor sensors channels and constants
chan start_sensors[id_e], stop_sensors[id_e], reach_floor[id_e];

// communications between button and request handlers
chan requests[id_f];

// communications between request handlers and main controller
chan go[id_e], served[id_e];

// The floor to which the main control is requested to go to.
meta id_f target_floor_shared[id_e];
</declaration>
	<template>
		<name>engine</name>
		<parameter>id_e i</parameter>
		<location id="id0" x="16" y="-168">
			<committed/>
		</location>
		<location id="id1" x="-256" y="-168">
			<committed/>
		</location>
		<location id="id2" x="-112" y="-80">
			<committed/>
		</location>
		<location id="id3" x="-256" y="-48">
			<name x="-306" y="-34">moving_down</name>
		</location>
		<location id="id4" x="16" y="-48">
			<name x="-17" y="-34">moving_up</name>
		</location>
		<location id="id5" x="-112" y="-168">
			<name x="-127" y="-204">idle</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="24" y="-128">start_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-248" y="-128">start_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-104" y="-128">stop_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-204" y="-68">stop[i]?</label>
			<nail x="-216" y="-48"/>
			<nail x="-112" y="-48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-224" y="-192">move_down[i]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-59" y="-68">stop[i]?</label>
			<nail x="-40" y="-48"/>
			<nail x="-112" y="-48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-76" y="-195">move_up[i]?</label>
		</transition>
	</template>
	<template>
		<name>button</name>
		<declaration>clock x;
id_f requested_floor = 0;
id_f f = 1;

void set_floor() 
{
    if (f == (NO_FLOORS) - 1) 
    {
        f = 1;
    }
    else
    {
        f++;
    }
}</declaration>
		<location id="id6" x="-170" y="-8">
		</location>
		<location id="id7" x="-32" y="-8">
			<name x="-85" y="34">request_issued</name>
			<label kind="invariant" x="-51" y="8">x &lt;= 30</label>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="assignment" x="-152" y="-8">x = 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-59" y="-136">x &gt;=1</label>
			<label kind="synchronisation" x="-59" y="-119">requests[f]!</label>
			<label kind="assignment" x="-59" y="-102">x = 0, set_floor(),
requested_floor = f</label>
			<nail x="-64" y="-48"/>
			<nail x="0" y="-48"/>
		</transition>
	</template>
	<template>
		<name>dgc_request_handler</name>
		<parameter>id_e e</parameter>
		<declaration>clock x;
bool timer_started = false;

// Local queue storing the requests.
id_f list[MAX_SIZE + 1]; // Leave room for the base floor, the elevator has to go back after the trip
int[0, MAX_SIZE + 1] len = 0;

// local requested floor
int req_floor;
const int BASE_FLOOR = 0;

// Put an element at the end of the queue
void enqueue(id_f element)
{
    list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
    int i = 0;
    len -= 1;
    while (i &lt; len)
    {
        list[i] = list[i + 1];
        i++;
	}
    list[i] = 0;
}

// Returns the front element of the queue
id_f front()
{
   return list[0];
}

// Returns true if the queue has a size of 0
bool is_empty ()
{
	return len == 0;
}

// Returns true if the queue is full
bool is_full ()
{
	return len == MAX_SIZE;
}

// Returns true if either the queueu is full, or at least one request
// is present and atleast max_time has passed
bool is_ready_to_go()
{
 	return true; 
}

// Round function for two integers. According to the online-help functions should be
// available, but to no avail, couldn't be found. So create it here.
int round_int_division(int dividend, int divisor)
{
    return (dividend + (divisor / 2)) / divisor;
    // https://stackoverflow.com/questions/2422712/rounding-integer-division-instead-of-truncating
}

// Check whether the current elevator has affinity to process the floor 
bool is_req_for_elevator(id_f floor_no)
{
    if ((floor_no / round_int_division(NO_FLOORS, NO_ELEVATORS)) == NO_ELEVATORS)
    {
        // Special case, where an overflow occurs, assign to NO_ELEVATORS - 1
        return (NO_ELEVATORS - 1 == e);
    } 
    else 
    {
        return (floor_no / round_int_division(NO_FLOORS, NO_ELEVATORS)) == e;
    }
    // round_int_division(NO_FLOORS, NO_ELEVATORS)   ===&gt;  group_size

    /*

    Manual checks
    -------------

    Stefano test 11 floors, 3 elevators

    group_size = (11 + (3/2)) / 3 = 12 / 3 = 4
    elevator = floor_no / groups_size
    
    floor      elevator
    -------------------
     0          0
     1          0
     2          0
     3          0
     4          1
     5          1
     6          1
     7          1
     8          2
     9          2
    10          2

    Property 4 verification:
    7 floors, 3 elevators

    group_size = (7 + (3/2)) / 3 = 8 / 3 = 2
    elevator = floor_no / groups_size
    
    floor      elevator
    -------------------
     0          0
     1          0
     2          1
     3          1
     4          2
     5          2
     6          2

    Assignment 1 reference setup
    9 floors, 3 elevators

    group_size = (9 + (3/2)) / 3 = 10 / 3 = 3
    elevator = floor_no / groups_size
    
    floor      elevator
    -------------------
     0          0
     1          0
     2          0
     3          1
     4          1
     5          1
     6          2
     7          2
     8          2

    4 floors, 2 elevators

    group_size = (4 + (3/2)) / 2 = 5 / 2 = 2
    elevator = floor_no / groups_size
    
    floor      elevator
    -------------------
     0          0
     1          0
     2          1
     3          1

    3 floors, 2 elevators

    group_size = (3 + (3/2)) / 2 = 4 / 2 = 2
    elevator = floor_no / groups_size
    
    floor      elevator
    -------------------
     0          0
     1          0
     2          1

    */
}

// Check whether the timer has been started
bool is_timer_started()
{
    return timer_started;
}

// Start the timer after the first request has been received
void start_timer() 
{
    x = 0;
    timer_started = true;
}

// Reset the timer. This means setting the timer_started boolean to false
void reset_timer() 
{
    timer_started = false;
}

// Function that sets the target floor, based on the dequeued requested floor
void set_target_floor(id_f floor_no)
{
    target_floor_shared[e] = floor_no;
}

</declaration>
		<location id="id8" x="-1861" y="-1742">
			<name x="-1955" y="-1768">request_ack</name>
			<committed/>
		</location>
		<location id="id9" x="-1615" y="-1742">
			<name x="-1606" y="-1734">request_received</name>
			<committed/>
		</location>
		<location id="id10" x="-1861" y="-1521">
			<name x="-1844" y="-1521">idle</name>
			<committed/>
		</location>
		<location id="id11" x="-1615" y="-1419">
			<name x="-1691" y="-1428">finished</name>
			<committed/>
		</location>
		<location id="id12" x="-1615" y="-1300">
			<name x="-1640" y="-1283">running</name>
		</location>
		<location id="id13" x="-1614" y="-1521">
			<name x="-1700" y="-1513">enqueueing</name>
			<label kind="invariant" x="-1598" y="-1564">is_empty() || 
x &lt;= MAX_WAIT</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-1513" y="-1419">!is_empty()</label>
			<label kind="synchronisation" x="-1513" y="-1402">go[e]!</label>
			<label kind="assignment" x="-1513" y="-1385">set_target_floor(front()), 
dequeue()</label>
			<nail x="-1521" y="-1419"/>
			<nail x="-1521" y="-1334"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-1343" y="-1453">is_full() || 
(!is_empty() &amp;&amp; x&gt;=MAX_WAIT)</label>
			<label kind="synchronisation" x="-1343" y="-1419">go[e]!</label>
			<label kind="assignment" x="-1343" y="-1402">enqueue(BASE_FLOOR), 
set_target_floor(front()), 
dequeue(),
reset_timer()</label>
			<nail x="-1351" y="-1470"/>
			<nail x="-1351" y="-1300"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="guard" x="-1776" y="-1708">!is_timer_started()</label>
			<label kind="assignment" x="-1776" y="-1691">start_timer()</label>
			<label kind="comments" x="-2040" y="-1691">IMPROVEMENT (stefano)
Start the counter after
the first request is
received. Then after 
MAX_WAIT time, start 
the cycle</label>
			<nail x="-1785" y="-1717"/>
			<nail x="-1785" y="-1657"/>
			<nail x="-1836" y="-1683"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id13"/>
			<label kind="guard" x="-1785" y="-1572">is_timer_started()</label>
			<nail x="-1861" y="-1564"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-1827" y="-1793">is_req_for_elevator(req_floor)</label>
			<label kind="assignment" x="-1827" y="-1776">enqueue(req_floor), req_floor = 0</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id9"/>
			<label kind="select" x="-1606" y="-1674">sel_floor_no: id_f</label>
			<label kind="guard" x="-1606" y="-1657">!is_full() &amp;&amp; 
(is_empty() || x&lt;MAX_WAIT)</label>
			<label kind="synchronisation" x="-1606" y="-1623">requests[sel_floor_no]?</label>
			<label kind="assignment" x="-1606" y="-1606">req_floor = sel_floor_no</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id13"/>
			<label kind="guard" x="-1598" y="-1793">!is_req_for_elevator(req_floor)</label>
			<label kind="assignment" x="-1598" y="-1776">req_floor = 0</label>
			<nail x="-1351" y="-1742"/>
			<nail x="-1351" y="-1521"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="assignment" x="-1785" y="-1538">x = 0</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="guard" x="-1606" y="-1470">is_empty()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1691" y="-1360">served[e]?</label>
		</transition>
	</template>
	<template>
		<name>floor_sensors</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id14" x="32" y="-24">
			<name x="-8" y="-8">moving</name>
			<label kind="invariant" x="40" y="-56">x &lt;= FLOOR_TIME</label>
		</location>
		<location id="id15" x="-200" y="-24">
			<name x="-264" y="-16">idle</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-120" y="-112">stop_sensors[i]?</label>
			<nail x="32" y="-88"/>
			<nail x="-200" y="-88"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="136" y="-24">x &gt;= FLOOR_TIME</label>
			<label kind="synchronisation" x="136" y="-8">reach_floor[i]!</label>
			<label kind="assignment" x="136" y="8">x := 0</label>
			<nail x="128" y="-24"/>
			<nail x="128" y="32"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-128" y="-48">start_sensors[i]?</label>
			<label kind="assignment" x="-104" y="-16">x := 0</label>
		</transition>
	</template>
	<template>
		<name>cabin_door</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id16" x="-348" y="42">
			<committed/>
		</location>
		<location id="id17" x="212" y="42">
			<committed/>
		</location>
		<location id="id18" x="212" y="-238">
			<committed/>
		</location>
		<location id="id19" x="-348" y="-238">
			<committed/>
		</location>
		<location id="id20" x="212" y="-85">
			<name x="228" y="-93">closed</name>
		</location>
		<location id="id21" x="-96" y="-88">
			<name x="-80" y="-88">executing</name>
			<label kind="invariant" x="-80" y="-104">x &lt;= DOOR_TIME</label>
		</location>
		<location id="id22" x="-348" y="-86">
			<name x="-425" y="-93">opened</name>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id21"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-272" y="42">pdoor_open[i]?</label>
			<nail x="-102" y="42"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="17" y="42">open_pdoor[i]!</label>
			<nail x="-93" y="42"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="8" y="-263">pdoor_closed[i]?</label>
			<nail x="-93" y="-238"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-272" y="-263">close_pdoor[i]!</label>
			<nail x="-102" y="-238"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id22"/>
			<label kind="guard" x="-476" y="-50">x &gt;= DOOR_TIME</label>
			<label kind="synchronisation" x="-476" y="-34">door_open[i]!</label>
			<label kind="assignment" x="-476" y="-18">x := 0</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="216" y="-40">open_door[i]?</label>
			<label kind="assignment" x="216" y="-16">x := 0</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="guard" x="216" y="-184">x &gt;= DOOR_TIME</label>
			<label kind="synchronisation" x="216" y="-168">door_closed[i]!</label>
			<label kind="assignment" x="216" y="-152">x := 0</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-450" y="-185">close_door[i]?</label>
			<label kind="assignment" x="-450" y="-168">x := 0</label>
			<label kind="comments" x="-425" y="-365">The description specifies that every every floor of every 
elevator has its own protecting door. Physically, this is
true, but because of performance reason it was decided that 
every elevator has its own protecting door. Modelling-wise,
this doesn't put any restriction on the use-case</label>
		</transition>
	</template>
	<template>
		<name>main_control</name>
		<parameter>id_e e</parameter>
		<declaration>bool up = false;
id_f target_floor = 0;
id_f current_floor = 0;

// function that returns true if the destination floor is JUST ABOUT to be reached
bool is_dest_reached()
{
    if (up == true &amp;&amp; (current_floor + 1) &gt;= target_floor ||
        up == false &amp;&amp; (current_floor - 1) &lt;= target_floor)
    {
        return true;
    }
    else 
    {
        return false;
    }
}

void go_up() 
{
    up = true;
}

void go_down() 
{
    up = false;
}

// returns true if the elevator must go up
bool is_must_go_up ()
{
    if (current_floor &lt; target_floor) 
    {
        return true;
    }
    else 
    {
        return false;
    }
}

// convenience method that returns true if the elevator must go down
bool is_must_go_down ()
{
    return !is_must_go_up();
}

// This function adjusts the current_floor, depending of the movement of direction
void adjust_current_floor()
{
    if (is_must_go_up()) 
    {
        current_floor++;
    }
    else 
    {
        current_floor--;
    }
}

// Check whether the requested floor is to the same floor
bool is_req_to_same_floor() 
{
    return (target_floor == current_floor);
}

// Set current floor equal to the target floor and
// reset target floor because of state-space reasons
void reset_floors() 
{
    current_floor = target_floor;
    target_floor = 0;
    up = false;
}

void get_target_floor() 
{
    target_floor = target_floor_shared[e];
}
</declaration>
		<location id="id23" x="-2218" y="-2847">
			<name x="-2261" y="-2881">dest_reached</name>
			<committed/>
		</location>
		<location id="id24" x="-2898" y="-2703">
			<name x="-3017" y="-2711">handle_served</name>
			<committed/>
		</location>
		<location id="id25" x="-2898" y="-2771">
			<name x="-3008" y="-2779">door_opening</name>
		</location>
		<location id="id26" x="-2898" y="-2847">
			<name x="-2974" y="-2855">stopped</name>
			<committed/>
		</location>
		<location id="id27" x="-2583" y="-2626">
			<name x="-2626" y="-2660">door_closing</name>
		</location>
		<location id="id28" x="-2413" y="-2626">
			<name x="-2516" y="-2660">door__closed</name>
			<committed/>
		</location>
		<location id="id29" x="-2736" y="-2626">
			<name x="-2856" y="-2652">request_received</name>
			<committed/>
		</location>
		<location id="id30" x="-2218" y="-2626">
			<name x="-2201" y="-2652">moving</name>
		</location>
		<location id="id31" x="-2898" y="-2541">
			<name x="-2881" y="-2549">init_door_opening</name>
		</location>
		<location id="id32" x="-3026" y="-2541">
			<name x="-3043" y="-2524">idle</name>
			<committed/>
		</location>
		<location id="id33" x="-2898" y="-2626">
			<name x="-2966" y="-2635">waiting</name>
		</location>
		<init ref="id32"/>
		<transition>
			<source ref="id29"/>
			<target ref="id24"/>
			<label kind="guard" x="-2728" y="-2686">is_req_to_same_floor()</label>
			<label kind="comments" x="-2728" y="-2805">IMPROVEMENT (ivo)
If the requested floor is 
equal to the current 
floor, shortcircuit the 
cycle and handle as served. 
Big state-space reduction</label>
			<nail x="-2736" y="-2703"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-2592" y="-2873">stop[e]!</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id23"/>
			<label kind="guard" x="-2201" y="-2737">is_dest_reached()</label>
			<label kind="synchronisation" x="-2201" y="-2720">reach_floor[e]?</label>
			<label kind="assignment" x="-2201" y="-2703">reset_floors()</label>
			<label kind="comments" x="-2201" y="-2830">IMPROVEMENT (stefano)
Refer to the declaration 
for the logic. Don't wait 
"floor_time" for the stop! 
sync action to be taken</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-2558" y="-2617">door_closed[e]?</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-2890" y="-2677">served[e]!</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-2889" y="-2754">door_open[e]?</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-2889" y="-2822">open_door[e]!</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id27"/>
			<label kind="guard" x="-2737" y="-2609">!is_req_to_same_floor()</label>
			<label kind="synchronisation" x="-2737" y="-2592">close_door[e]!</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="guard" x="-2405" y="-2703">is_must_go_down()</label>
			<label kind="synchronisation" x="-2405" y="-2686">move_down[e]!</label>
			<label kind="assignment" x="-2405" y="-2669">go_down()</label>
			<nail x="-2414" y="-2703"/>
			<nail x="-2261" y="-2703"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="guard" x="-2405" y="-2618">is_must_go_up()</label>
			<label kind="synchronisation" x="-2405" y="-2601">move_up[e]!</label>
			<label kind="assignment" x="-2405" y="-2584">go_up()</label>
			<nail x="-2414" y="-2558"/>
			<nail x="-2261" y="-2558"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-2864" y="-2618">go[e]?</label>
			<label kind="assignment" x="-2864" y="-2601">get_target_floor()</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="guard" x="-2218" y="-2565">!is_dest_reached()</label>
			<label kind="synchronisation" x="-2218" y="-2549">reach_floor[e]?</label>
			<label kind="assignment" x="-2218" y="-2532">adjust_current_floor()</label>
			<nail x="-2159" y="-2626"/>
			<nail x="-2159" y="-2575"/>
			<nail x="-2218" y="-2575"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-3009" y="-2592">door_open[e]?</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-3009" y="-2533">open_door[e]!</label>
		</transition>
	</template>
	<template>
		<name>protecting_door</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id34" x="-112" y="8">
			<name x="-144" y="24">executing_open</name>
			<label kind="invariant" x="-144" y="40">x &lt;= DOOR_TIME</label>
		</location>
		<location id="id35" x="40" y="-96">
			<name x="59" y="-110">closed</name>
		</location>
		<location id="id36" x="-112" y="-120">
			<name x="-93" y="-127">executing</name>
			<label kind="invariant" x="-144" y="-104">x &lt;= DOOR_TIME</label>
		</location>
		<location id="id37" x="-232" y="-104">
			<name x="-297" y="-110">opened</name>
		</location>
		<init ref="id35"/>
		<transition>
			<source ref="id34"/>
			<target ref="id37"/>
			<label kind="guard" x="-365" y="-75">x &gt;= DOOR_TIME</label>
			<label kind="synchronisation" x="-365" y="-59">pdoor_open[i]!</label>
			<label kind="assignment" x="-365" y="-43">x := 0</label>
			<nail x="-232" y="8"/>
			<nail x="-232" y="-80"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="51" y="-68">open_pdoor[i]?</label>
			<label kind="assignment" x="51" y="-51">x := 0</label>
			<nail x="40" y="-32"/>
			<nail x="40" y="8"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-85" y="-211">x &gt;= DOOR_TIME</label>
			<label kind="synchronisation" x="-85" y="-195">pdoor_closed[i]!</label>
			<label kind="assignment" x="-85" y="-179">x := 0</label>
			<nail x="-96" y="-152"/>
			<nail x="40" y="-152"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-229" y="-195">close_pdoor[i]?</label>
			<label kind="assignment" x="-229" y="-178">x := 0</label>
			<nail x="-232" y="-152"/>
			<nail x="-128" y="-152"/>
		</transition>
	</template>
	<system>system cabin_door, protecting_door, engine, floor_sensors, button, dgc_request_handler, main_control;</system>
	<queries>
		<query>
			<formula>A[] 
(
    not
    (
        (engine(0).moving_up or engine(0).moving_down) 
            and 
        (cabin_door(0).opened or protecting_door(0).opened)
    )
)
			</formula>
			<comment>Property 2: The elevator never travels with its door open
			</comment>
		</query>
		<query>
			<formula>(   
    (   dgc_request_handler(0).request_received and 
        (
            dgc_request_handler(0).req_floor == 0 or
            dgc_request_handler(0).req_floor == 1
        )
    ) or
    (
        dgc_request_handler(1).request_received and
        (
            dgc_request_handler(1).req_floor == 2 or
            dgc_request_handler(1).req_floor == 3
        )
    )
)
--&gt;
(
    main_control(0).dest_reached and 
        (main_control(0).current_floor == 0 or
         main_control(0).current_floor == 1)
        or
    main_control(1).dest_reached and 
        (main_control(1).current_floor == 2 or 
         main_control(1).current_floor == 3)
)
			</formula>
			<comment>Property 5: All floor requests are eventually served, i.e., the elevator reaches its destination.
			</comment>
		</query>
	</queries>
</nta>
