<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int NO_FLOORS = 3;               // number of floors including the base floor
const int NO_ELEVATORS = 2;            // number of elevators
const int MAX_SIZE = 5;                // maximum amount of requests per elevator before it takes off
const int MAX_WAIT = 3;                // maximum amount of wait time before elevator runs with at least 1 person 

typedef int[0, NO_FLOORS - 1] id_f;    // floor id from 0 to NO_FLOORS - 1
typedef int[0, NO_ELEVATORS - 1] id_e; // elevator id from 0 to NO_ELEVATORS - 1

// time to open or close the door
const int door_time = 1;     
 
// cabin door channels
chan open_door[id_e], close_door[id_e], door_open[id_e], door_closed[id_e]; 

// protecting door channels
chan open_pdoor[id_e], close_pdoor[id_e], pdoor_open[id_e], pdoor_closed[id_e];

// engine channels
chan stop[id_e], move_down[id_e], move_up[id_e];

// floor sensors channels and constants
const int floor_time = 1; // time to travel one floor
chan start_sensors[id_e], stop_sensors[id_e], reach_floor[id_e];

// communications between button and request handlers
chan requests[id_f];

// communications between request handlers and main controller
chan go[id_e], served[id_e];

// The current floor of the elevator:
id_f current_floor[id_e]; 
// The floor to which the main control is requested to go to.
// This variable is just used for communication between the request handler and the main control.
// Therefore, we can declare it meta (i.e., not part of the state).
meta id_f target_floor[id_e];

// meta variable used to communicate selected floor between button and request handler
meta id_f requested_floor;
</declaration>
	<template>
		<name>engine</name>
		<parameter>id_e i</parameter>
		<location id="id0" x="16" y="-168">
			<committed/>
		</location>
		<location id="id1" x="-256" y="-168">
			<committed/>
		</location>
		<location id="id2" x="-112" y="-80">
			<committed/>
		</location>
		<location id="id3" x="-256" y="-48">
			<name x="-306" y="-34">e_moving_down</name>
		</location>
		<location id="id4" x="16" y="-48">
			<name x="-17" y="-34">e_moving_up</name>
		</location>
		<location id="id5" x="-112" y="-168">
			<name x="-127" y="-204">e_idle</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="24" y="-128">start_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-248" y="-128">start_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-104" y="-128">stop_sensors[i]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-204" y="-68">stop[i]?</label>
			<nail x="-216" y="-48"/>
			<nail x="-112" y="-48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-224" y="-192">move_down[i]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-59" y="-68">stop[i]?</label>
			<nail x="-40" y="-48"/>
			<nail x="-112" y="-48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-76" y="-195">move_up[i]?</label>
		</transition>
	</template>
	<template>
		<name>button</name>
		<declaration>clock x;</declaration>
		<location id="id6" x="-32" y="-8">
			<name x="-51" y="8">b_idle</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="-51" y="-119">f: id_f</label>
			<label kind="guard" x="-51" y="-102">x &gt;=1</label>
			<label kind="synchronisation" x="-51" y="-85">requests[f]!</label>
			<label kind="assignment" x="-51" y="-68">x = 0</label>
			<nail x="-64" y="-48"/>
			<nail x="0" y="-48"/>
		</transition>
	</template>
	<template>
		<name>dgc_request_handler</name>
		<parameter>id_e e</parameter>
		<declaration>clock x;
bool timer_started = false;

// Local queue storing the requests.
id_f list[MAX_SIZE + 1]; // Leave room for the base floor, the elevator has to go back after the trip
int[0, MAX_SIZE + 1] len = 0;

// local requested floor
int rq_floor;

// Put an element at the end of the queue
void enqueue(id_f element)
{
        list[len++] = element;
}

// Remove the front element of the queue and return it to the caller
id_f dequeue()
{
        id_f element = list[0];
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
        return element;
}

bool is_empty ()
{
	return len == 0;
}

// Returns true if either the queueu is full, or at least one request
// is present and atleast max_time has passed
bool is_ready_to_go()
{
 	return true; 
}

// Round function for two integers. According to the online-help functions should be
// available, but to no avail, couldn't be found. So create it here.
int round_int_division(int dividend, int divisor)
{
    return (dividend + (divisor / 2)) / divisor;
}

int group_size = round_int_division(NO_FLOORS, NO_ELEVATORS);

// Check whether the current elevator has affinity to process the floor 
bool is_req_for_elevator(id_f floor_no)
{
    return (floor_no / group_size) == e;
}

bool is_timer_started()
{
    if (len == 1 &amp;&amp; !timer_started)
        return false;
    else
        return true;
}

</declaration>
		<location id="id7" x="-1861" y="-1734">
			<committed/>
		</location>
		<location id="id8" x="-1615" y="-1734">
			<name x="-1598" y="-1759">r_checking_eligibility</name>
			<committed/>
		</location>
		<location id="id9" x="-1870" y="-1521">
			<name x="-1887" y="-1555">r_idle</name>
			<committed/>
		</location>
		<location id="id10" x="-1615" y="-1385">
			<name x="-1700" y="-1394">r_served</name>
			<committed/>
		</location>
		<location id="id11" x="-1445" y="-1326">
			<name x="-1487" y="-1309">r_finished_go</name>
		</location>
		<location id="id12" x="-1326" y="-1385">
			<name x="-1309" y="-1394">r_dequeued</name>
			<committed/>
		</location>
		<location id="id13" x="-1614" y="-1521">
			<name x="-1598" y="-1521">r_enqueueing</name>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-1980" y="-1598">!is_timer_started()</label>
			<label kind="assignment" x="-1980" y="-1581">x = 0, timer_started = true</label>
			<nail x="-2006" y="-1598"/>
			<nail x="-1759" y="-1598"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id13"/>
			<label kind="guard" x="-1776" y="-1683">is_timer_started()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-1819" y="-1759">is_req_for_elevator(rq_floor)</label>
			<label kind="assignment" x="-1793" y="-1734">enqueue(rq_floor)</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id8"/>
			<label kind="select" x="-1606" y="-1666">f: id_f</label>
			<label kind="guard" x="-1606" y="-1649">len!=MAX_SIZE &amp;&amp; 
(len&lt;1 || x&lt;=MAX_WAIT)</label>
			<label kind="synchronisation" x="-1606" y="-1615">requests[f]?</label>
			<label kind="assignment" x="-1606" y="-1598">rq_floor = f</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id13"/>
			<label kind="guard" x="-1589" y="-1725">!is_req_for_elevator(rq_floor)</label>
			<nail x="-1377" y="-1734"/>
			<nail x="-1377" y="-1547"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id13"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="guard" x="-1751" y="-1462">is_empty()</label>
			<label kind="assignment" x="-1751" y="-1445">timer_started = false</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="guard" x="-1504" y="-1445">!is_empty()</label>
			<label kind="assignment" x="-1504" y="-1428">target_floor[e] = dequeue()</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1598" y="-1343">served[e]?</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1385" y="-1351">go[e]!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-1309" y="-1513">len==MAX_SIZE || (len&gt;=1 &amp;&amp; x&gt;MAX_WAIT)</label>
			<label kind="assignment" x="-1309" y="-1496">enqueue(0), 
target_floor[e] = dequeue()</label>
			<nail x="-1326" y="-1521"/>
		</transition>
	</template>
	<template>
		<name>floor_sensors</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id14" x="32" y="-24">
			<name x="-8" y="-8">fs_moving</name>
			<label kind="invariant" x="40" y="-56">x &lt;= floor_time</label>
		</location>
		<location id="id15" x="-200" y="-24">
			<name x="-264" y="-16">fd_idle</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-120" y="-112">stop_sensors[i]?</label>
			<nail x="32" y="-88"/>
			<nail x="-200" y="-88"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="136" y="-24">x &gt;= floor_time</label>
			<label kind="synchronisation" x="136" y="-8">reach_floor[i]!</label>
			<label kind="assignment" x="136" y="8">x := 0</label>
			<nail x="128" y="-24"/>
			<nail x="128" y="32"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-128" y="-48">start_sensors[i]?</label>
			<label kind="assignment" x="-104" y="-16">x := 0</label>
		</transition>
	</template>
	<template>
		<name>cabin_door</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id16" x="-348" y="42">
			<committed/>
		</location>
		<location id="id17" x="212" y="42">
			<committed/>
		</location>
		<location id="id18" x="212" y="-238">
			<committed/>
		</location>
		<location id="id19" x="-348" y="-238">
			<committed/>
		</location>
		<location id="id20" x="212" y="-85">
			<name x="228" y="-93">cd_closed</name>
		</location>
		<location id="id21" x="-96" y="-88">
			<name x="-80" y="-88">cd_executing</name>
			<label kind="invariant" x="-80" y="-104">x &lt;= door_time</label>
		</location>
		<location id="id22" x="-348" y="-86">
			<name x="-442" y="-100">cd_opened</name>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id21"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-272" y="42">pdoor_open[i]?</label>
			<nail x="-102" y="42"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="17" y="42">open_pdoor[i]!</label>
			<nail x="-93" y="42"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="8" y="-263">pdoor_closed[i]?</label>
			<nail x="-93" y="-238"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-272" y="-263">close_pdoor[i]!</label>
			<nail x="-102" y="-238"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id22"/>
			<label kind="guard" x="-460" y="-46">x &gt;= door_time</label>
			<label kind="synchronisation" x="-460" y="-30">door_open[i]!</label>
			<label kind="assignment" x="-460" y="-14">x := 0</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="216" y="-40">open_door[i]?</label>
			<label kind="assignment" x="216" y="-16">x := 0</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="guard" x="216" y="-184">x &gt;= door_time</label>
			<label kind="synchronisation" x="216" y="-168">door_closed[i]!</label>
			<label kind="assignment" x="216" y="-152">x := 0</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-450" y="-185">close_door[i]?</label>
			<label kind="assignment" x="-450" y="-168">x := 0</label>
		</transition>
	</template>
	<template>
		<name>main_control</name>
		<parameter>id_e e</parameter>
		<declaration>// the current destination
id_f dest_floor = 1; 
//bool going_down = false;
//bool going_up = false;

// These two booleans are needed when handling the reached_floor sync action at the exact
// moment that the elevator has reached the destination floor. At that point the direction of
// movement is needed in order to calculate whether the destination has been reached or not.
// This could be done in the model itsef, but it would result in verbose code and would not
// make the model easier to read. Therefore, that logic will be put in dest_reached() function
int[-1, 1] direction = 0; // 0: no direction, 1: up, -1: down

// Convenience function to check what the direction of movement is. Check: going down ?
bool is_going_down ()
{
    if (direction == -1)
    {
        return true;
    }
    else
    {
        return false;
    }
}

// Convenience function to check what the direction of movement is. Check: going up ?
bool is_going_up ()
{
    if (direction == 1)
    {
        return true;
    }
    else
    {
        return false;
    }
}

// Convenience method to indicate that the elevator is going up
void going_up() 
{
    direction = 1;
}

// Convenience method to indicate that the elevator is going up
void going_down() 
{
    direction = -1;
}


void reset_direction()
{
   direction = 0;
}


// function that returns true if the destination floor has been reached
bool is_dest_reached ()
{
	return current_floor[e] == dest_floor;
}

// function that returns true if the destination floor is JUST ABOUT to be reached
bool is_dest_almost_reached ()
{
    if ((is_going_up() &amp;&amp; (current_floor[e] + 1) == dest_floor) ||
        (is_going_down() &amp;&amp; (current_floor[e] - 1) == dest_floor))
    {
        return true;
    }
    else 
    {
        return false;
    }
}

// returns true if the elevator must go up
bool is_must_go_up ()
{
    if (current_floor[e] &lt; dest_floor) 
    {
        return true;
    }
    else 
    {
        return false;
    }
}

// convenience method that returns true if the elevator must go down
bool is_must_go_down ()
{
    return !is_must_go_up();
}

// This function adjusts the current_floor, depending of the movement of direction
void adjust_current_floor()
{
    if (is_must_go_up()) 
    {
        current_floor[e]++;
    }
    else 
    {
        current_floor[e]--;
    }
}
</declaration>
		<location id="id23" x="-2202" y="-2779">
			<name x="-2212" y="-2813">Temp</name>
		</location>
		<location id="id24" x="-2848" y="-2635">
			<name x="-2873" y="-2643">B</name>
		</location>
		<location id="id25" x="-2848" y="-2703">
			<name x="-2958" y="-2711">door_opening</name>
		</location>
		<location id="id26" x="-2848" y="-2779">
			<name x="-2924" y="-2787">stopped</name>
		</location>
		<location id="id27" x="-2567" y="-2558">
			<name x="-2610" y="-2592">door_closing</name>
		</location>
		<location id="id28" x="-2397" y="-2558">
			<name x="-2380" y="-2566">door_closed_</name>
			<committed/>
		</location>
		<location id="id29" x="-2686" y="-2558">
			<committed/>
		</location>
		<location id="id30" x="-2202" y="-2558">
			<name x="-2185" y="-2584">moving</name>
		</location>
		<location id="id31" x="-2958" y="-2558">
			<name x="-3026" y="-2592">door_init_opening</name>
		</location>
		<location id="id32" x="-3094" y="-2558">
			<committed/>
		</location>
		<location id="id33" x="-2848" y="-2558">
			<name x="-2839" y="-2592">door_opened</name>
		</location>
		<init ref="id32"/>
		<transition>
			<source ref="id29"/>
			<target ref="id24"/>
			<label kind="guard" x="-2703" y="-2660">dest_floor == current_floor[e]</label>
			<nail x="-2686" y="-2635"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-2601" y="-2805">stop[e]!</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id23"/>
			<label kind="guard" x="-2193" y="-2686">is_dest_almost_reached()</label>
			<label kind="synchronisation" x="-2193" y="-2669">reach_floor[e]?</label>
			<label kind="assignment" x="-2194" y="-2651">adjust_current_floor()</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-2542" y="-2549">door_closed[e]?</label>
			<label kind="assignment" x="-2542" y="-2532">reset_direction()</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-2839" y="-2617">served[e]!</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-2839" y="-2686">door_open[e]?</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-2839" y="-2754">open_door[e]!</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id27"/>
			<label kind="guard" x="-2677" y="-2456">dest_floor != current_floor[e]</label>
			<label kind="synchronisation" x="-2669" y="-2549">close_door[e]!</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="guard" x="-2355" y="-2694">is_must_go_down()</label>
			<label kind="synchronisation" x="-2355" y="-2677">move_down[e]!</label>
			<label kind="assignment" x="-2355" y="-2660">going_down()</label>
			<nail x="-2304" y="-2634"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="guard" x="-2347" y="-2481">is_must_go_up()</label>
			<label kind="synchronisation" x="-2347" y="-2464">move_up[e]!</label>
			<label kind="assignment" x="-2346" y="-2447">going_up()</label>
			<nail x="-2304" y="-2481"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-2797" y="-2558">go[e]?</label>
			<label kind="assignment" x="-2797" y="-2541">dest_floor = 
target_floor[e]</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="guard" x="-2202" y="-2497">!is_dest_almost_reached()</label>
			<label kind="synchronisation" x="-2202" y="-2481">reach_floor[e]?</label>
			<label kind="assignment" x="-2202" y="-2464">adjust_current_floor()</label>
			<nail x="-2143" y="-2558"/>
			<nail x="-2143" y="-2507"/>
			<nail x="-2202" y="-2507"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-2950" y="-2549">door_open[e]?</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-3068" y="-2550">open_door[e]!</label>
		</transition>
	</template>
	<template>
		<name>protecting_door</name>
		<parameter>id_e i</parameter>
		<declaration>clock x;</declaration>
		<location id="id34" x="-112" y="8">
			<name x="-144" y="24">pd_executing_open</name>
			<label kind="invariant" x="-144" y="40">x &lt;= door_time</label>
		</location>
		<location id="id35" x="40" y="-96">
			<name x="59" y="-110">pd_closed</name>
		</location>
		<location id="id36" x="-112" y="-120">
			<name x="-93" y="-127">pd_executing</name>
			<label kind="invariant" x="-144" y="-104">x &lt;= door_time</label>
		</location>
		<location id="id37" x="-232" y="-104">
			<name x="-314" y="-119">pd_open</name>
		</location>
		<init ref="id35"/>
		<transition>
			<source ref="id34"/>
			<target ref="id37"/>
			<label kind="guard" x="-352" y="-80">x &gt;= door_time</label>
			<label kind="synchronisation" x="-352" y="-64">pdoor_open[i]!</label>
			<label kind="assignment" x="-352" y="-48">x := 0</label>
			<nail x="-232" y="8"/>
			<nail x="-232" y="-80"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="48" y="-64">open_pdoor[i]?</label>
			<label kind="assignment" x="51" y="-51">x := 0</label>
			<nail x="40" y="-32"/>
			<nail x="40" y="8"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-88" y="-200">x &gt;= door_time</label>
			<label kind="synchronisation" x="-88" y="-184">pdoor_closed[i]!</label>
			<label kind="assignment" x="-88" y="-168">x := 0</label>
			<nail x="-96" y="-152"/>
			<nail x="40" y="-152"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-229" y="-195">close_pdoor[i]?</label>
			<label kind="assignment" x="-229" y="-178">x := 0</label>
			<nail x="-232" y="-152"/>
			<nail x="-128" y="-152"/>
		</transition>
	</template>
	<system>system cabin_door, protecting_door,engine, floor_sensors, button, dgc_request_handler, main_control;</system>
	<queries>
		<query>
			<formula>A[] engine(0).e_moving_up imply cabin_door(0).cd_closed
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] ((dgc_request_handler(0).r_dequeued and dgc_request_handler(0).len == 3) imply dgc_request_handler(0).x &gt;= MAX_WAIT)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; dgc_request_handler(0).r_enqueueing and dgc_request_handler(0).len==MAX_SIZE
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
